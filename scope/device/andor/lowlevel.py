# This code is licensed under the MIT License (see LICENSE file for details)

import ctypes
import atexit

# import all the autogenerated functions and definitions
# note: also pulls in common which provides AndorError and several other constants
from . import wrapper
from .wrapper import *

# Provided for reference purposes, the FeatureStrings list contains all the "feature strings"
# listed in the Andor SDK documentation. The value given for the Feature argument to functions
# provided by this module should be a string appearing in this list.
FeatureStrings = [
    'AccumulateCount', # zyla only
    'AcquisitionStart',
    'AcquisitionStop',
    'AOIBinning',
    'AOIHBin',
    'AOIHeight',
    'AOILeft',
    'AOIStride',
    'AOITop',
    'AOIVBin',
    'AOIWidth',
    'AuxiliaryOutSource',
    'Baseline',
    'BitDepth',
    'BufferOverflowEvent',
    'BytesPerPixel',
    'CameraAcquiring',
    'CameraFamily', # sona only
    'CameraModel',
    'CameraName',
    'CameraPresent',
    'CycleMode',
    'DeviceCount', # system
    'ElectronicShutteringMode',
    'EventEnable',
    'EventsMissedEvent',
    'EventSelector',
    'ExposureTime',
    'ExposureEndEvent',
    'ExposureStartEvent',
    'ExternalTriggerDelay',
    'FanSpeed',
    'FirmwareVersion',
    'FrameCount',
    'FrameRate',
    'FullAOIControl',
    'GainMode', # sona only
    'ImageSizeBytes',
    'InterfaceType',
    'IOInvert',
    'IOSelector',
    'LogLevel', # system
    'LUTIndex',
    'LUTValue',
    'MaxInterfaceTransferRate',
    'MetadataEnable',
    'MetadataFrame',
    'MetadataTimestamp',
    'Overlap',
    'PixelEncoding',
    'PixelHeight',
    'PixelReadoutRate',
    'PixelWidth',
    'ReadoutTime',
    'RollingShutterGlobalClear', # zyla only
    'RowNExposureEndEvent',
    'RowNExposureStartEvent',
    'RowReadTime',
    'SensorCooling',
    'SensorHeight',
    'SensorTemperature',
    'SensorWidth',
    'SerialNumber',
    'SimplePreAmpGainControl', # deprecated on sona
    'SoftwareTrigger',
    'SoftwareVersion', # system
    'SpuriousNoiseFilter',
    'StaticBlemishCorrection', # zyla only
    'TemperatureControl',
    'TemperatureStatus',
    'TimestampClock',
    'TimestampClockFrequency',
    'TimestampClockReset',
    'TriggerMode',
    'VerticallyCenterAOI'
]


_AT_HANDLE_SYSTEM = 1

def _init_core_lib(corepath='libatcore.so'):
    if wrapper._at_core_lib is not None:
        return

    wrapper._at_core_lib = ctypes.CDLL(corepath)
    wrapper._setup_core_functions()
    wrapper._at_core_lib.AT_InitialiseLibrary()
    atexit.register(wrapper._at_core_lib.AT_FinaliseLibrary)

def _init_util_lib(utilpath='libatutility.so'):
    if wrapper._at_util_lib is not None:
        return

    wrapper._at_util_lib = ctypes.CDLL(utilpath)
    wrapper._setup_util_functions()
    wrapper._at_util_lib.AT_InitialiseUtilityLibrary()
    atexit.register(wrapper._at_util_lib.AT_FinaliseUtilityLibrary)

def list_cameras():
    devices_attached = wrapper._at_core_lib.AT_GetInt(_AT_HANDLE_SYSTEM, 'DeviceCount')
    cameras = []
    for i in range(devices_attached):
        handle = wrapper._at_core_lib.AT_Open(i)
        cameras.append(wrapper._at_core_lib.AT_GetString(handle, 'CameraModel'))
        wrapper._at_core_lib.AT_Close(handle)
    return cameras

def _init_camera(desired_camera):
    if wrapper._at_camera_handle is not None:
        return
    devices_attached = wrapper._at_core_lib.AT_GetInt(_AT_HANDLE_SYSTEM, 'DeviceCount')
    # Even on the scope machine, the default Andor configuration includes two
    # virtual cameras, for a total of three camera devices. A hardware camera
    # will take device index 0, provided you have only one hardware camera, and
    # we are very clearly working under this assumption. To be sure, we then query
    # the camera's name and ensuring that it matches the name of our camera.
    if devices_attached < 3:
        raise AndorError('No Andor cameras detected. Is the camera turned on?')

    wrapper._at_camera_handle = wrapper._at_core_lib.AT_Open(0)
    actual_camera = GetString('CameraModel')
    if actual_camera != desired_camera:
        wrapper._at_core_lib.AT_Close(wrapper._at_camera_handle)
        wrapper._at_camera_handle = None
        raise AndorError('Model name of Andor device 0, "' + actual_camera +
                         '", does not match the desired camera model name, "' +
                         desired_camera + '".')
    atexit.register(wrapper._at_core_lib.AT_Close, wrapper._at_camera_handle)

def initialize(desired_camera):
    """Initialize the andor libraries and make sure that the connected camera
    matches the desired camera model name. (If the camera is turned off, Andor
    will often provide a "simulated camera" instead; this check avoids that
    gotcha.)"""
    _init_core_lib()
    _init_util_lib()
    _init_camera(desired_camera)
    return wrapper._at_core_lib.AT_GetString(_AT_HANDLE_SYSTEM, 'SoftwareVersion')
